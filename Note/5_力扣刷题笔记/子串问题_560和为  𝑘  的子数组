```java
class Solution {
    public int subarraySum(int[] nums, int k) {
        int count = 0, sum = 0;
        HashMap<Integer, Integer> prefixMap = new HashMap<>();
        prefixMap.put(0, 1); // 初始化一个前缀和为 0 的情况
        
        for (int num : nums) {
            sum += num;  // 计算当前前缀和
            if (prefixMap.containsKey(sum - k)) {  // 检查是否存在 sum - k
                count += prefixMap.get(sum - k);  // 累加符合条件的子数组数量
            }
            // 更新前缀和的出现次数
            prefixMap.put(sum, prefixMap.getOrDefault(sum, 0) + 1);
        }
        
        return count;
    }
}
```

采用的是以时间换空间的优化策略，使用哈希表和前缀和这两个工具。

1. 这里去找sum-k的个数的原因是：

   假设我们现在的前缀和是 `sum`。要判断从某个之前的索引到当前索引的子数组是否和为 `k`，我们需要找到这样一个前缀和 `sum'`，使得：

   $sum−sum’==k$

   换句话说，**当前的前缀和 `sum` 减去某个之前的前缀和 `sum'`**，如果结果是 `k`，就说明当前索引到某个之前索引的子数组和为 `k`。

2. `prefixMap.getOrDefault(sum, 0)` 的作用是：如果哈希表中已经存储了 `sum` 这个前缀和，则返回它的出现次数；如果没有，则返回 `0`。

   然后，将其加 `1`，表示当前前缀和 `sum` 出现了一次。

还是比较容易被绕进去的，先掌握一下思路和暴力解法吧。